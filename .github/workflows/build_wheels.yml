name: Build

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install -d

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        with:
          package-dir: .
          output-dir: wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_executable:
    name: Build Windows executable
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install -d
          pip install cx_Freeze

      - name: Build executable
        run: |
          python setup_whl.py build

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: exe-windows-latest
          path: ./build/exe.win-amd64-3.12/*.exe # Adjust path based on where cx_Freeze outputs the executable

  tag_release:
    name: Increment Git Tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Increment tag
        id: tag_version
        run: |
          # Get the latest tag and strip the 'v' prefix
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"

          # Increment the patch version
          if [ -z "$latest_tag" ]; then
            new_tag="v0.0.1"
          else
            latest_version=${latest_tag#v}
            IFS='.' read -r -a version_parts <<< "$latest_version"
            new_patch=$((version_parts[2] + 1))
            new_tag="v${version_parts[0]}.${version_parts[1]}.$new_patch"
          fi

          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create and push new tag
        run: |
          new_tag=${{ steps.tag_version.outputs.new_tag }}
          git tag "$new_tag"
          git push origin "$new_tag"
